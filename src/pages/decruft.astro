---
import MainLayout from '../layouts/MainLayout.astro';
const title = 'Output Log Decrufter - Cities Skylines Modding';
---

<MainLayout title={title}>
	<section class="pt-12 pb-48 sm:ml-64 text-lg text-hit-gray-500">
		<div class="content">
			<h2
				class="border-b-2 border-hit-gray-600 xl:mt-12 pb-8 text-4xl font-medium text-hit-gray-400"
				id="decruft"
			>
				Output Log Decrufter
			</h2>
			<p class="mt-4">
				A tool made by aubergine18 which attempts to extract the relevant parts of an output log.
			</p><p class="mt-4">
				The output log can be found here:<br /><span class="path"
					>C:\Program Files (x86)\Steam\steamapps\common\Cities_Skylines\Cities_Data\output_log.txt</span
				>
			</p>
			<p class="mt-4">Paste the raw output log in the first field, then click decruft.</p>
			<form>
				<textarea
					id="doc"
					class="bg-[#282b2f] h-64 px-4 py-2 w-full focus:ring focus:outline-none focus:ring-hit-gray-800 mt-4"
				></textarea><br />
				<button
					class="bg-[#282b2f] mt-2 py-2 px-4 rounded-md border border-[#34383d] uppercase hover:bg-[#2b3033]"
					onclick="decruft(document.getElementById('doc'),document.getElementById('errs'))"
					type="button">Decruft</button
				><br />
				<textarea
					id="errs"
					class="bg-[#282b2f] px-4 py-2 h-[90vh] focus:ring focus:outline-none focus:ring-hit-gray-800 w-full mt-4"
				></textarea>
			</form>
		</div>
	</section>
</MainLayout>

<script is:inline>
	function decruft(doc, errs) {
		let log = doc.value;
		let lines = log.split('\n');

		// decruft the log file

		for (var i = lines.length - 1; i > 0; i--) {
			let current = lines[i];
			if (current.indexOf('DebugBindings.gen.cpp Line: 51') != -1) {
				// literally log bukkake
				lines.splice(i, 2);
			} else if (current.startsWith('Fallback handler')) {
				// who cares?
				lines.splice(i, 1);
			} else if (current.indexOf('(this message is harmless)') != -1) {
				// so why log it?
				lines.splice(i, 1);
			} else if (current.startsWith('Assembly ')) {
				// rid
				lines.splice(i, 2);
			} else if (current.startsWith('No source files found:')) {
				// rid
				lines.splice(i, 2);
			} else if (current.startsWith('(Filename:  Line: ')) {
				// not useful
				if (lines[i + 2].startsWith('d3d11: failed')) {
					lines.splice(i, 4);
				} else {
					lines.splice(i, 2);
				}
			} else if (current.endsWith(' [Mods - Internal]')) {
				// shrink it
				let idx1 = current.lastIndexOf('\\') + 1;
				let idx2 = current.indexOf(' [Mods ');
				let what = current.substring(idx1, idx2);

				let where = '?';

				if (current.indexOf('Cities_Skylines\\Files\\Mods') != -1) {
					where = 'Bundled Mod';
				} else if (current.indexOf('Cities_Skylines\\Addons\\Mods') != -1) {
					where = 'Local Mod';
				} else if (current.indexOf('workshop\\content\\255710') != -1) {
					where = 'Workshop Mod';
				}

				lines[i] = where + ': ' + what;
				lines.splice(i + 1, 1);
			} else if (current.endsWith(' [Packer - Internal]')) {
				// shrink it
				let what = current.split("'")[1];
				let idx1 = current.lastIndexOf('\\') + 1;
				let idx2 = current.indexOf('.crp');
				let name = current.substring(idx1, idx2);

				lines[i] = "Asset: '" + what + "' = " + name;
				lines.splice(i + 1, 1);
			}
		}

		// clear excess blank lines

		let blank = false;

		for (var i = lines.length - 1; i > 0; i--) {
			let current = lines[i];
			if (current.length < 3) {
				if (!blank) {
					blank = true;
				} else {
					lines.splice(i, 1);
				}
			} else {
				blank = false;
			}
		}

		// output decrufted log

		doc.value = lines.join('\n');

		// now split out errors

		let active = false;
		let crash = false;
		let trace = [];
		let errors = 0;

		for (var i = 0; i < lines.length; i++) {
			current = lines[i];
			if (current.startsWith('Crash!!!')) {
				crash = true;
				errors += 1;
				trace.push('', '--- #' + errors + ' ---', '', current);
			} else if (crash) {
				if (current.length < 2) {
					crash = false;
				} else {
					trace.push(current);
				}
			} else if (current.startsWith('  at ')) {
				if (!active) {
					errors += 1;
					trace.push('', '--- #' + errors + ' ---', '', lines[i - 1]);
					active = true;
				}
				trace.push(current);
			} else if (active) {
				active = false;
			}
		}

		// add number of stack traces found

		trace.unshift('Stack traces found: ' + errors);

		// output stack traces

		errs.value = trace.join('\n');
	}
</script>
