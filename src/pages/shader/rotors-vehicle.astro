---
import MainLayout from '../../layouts/MainLayout.astro';
import Link from '../../components/Link.astro';
import TableOfContents from '../../components/TableOfContents.astro';
const title = 'Rotors Vehicles - Cities Skylines Modding';
import { Picture } from 'astro:assets';
import { images } from '../../data/imageImports.js';
---

<MainLayout title={title}>
	<TableOfContents />
	<section class="py-12 text-lg sm:ml-64 xl:mr-64 text-hit-gray-500">
		<h1 id="overview" class="pb-8 text-4xl font-bold border-b-4 border-hit-gray-600 text-hit-gray-400">
			Rotors Shader (Vehicle Glass)
		</h1>
		<div class="content">
			<h2 class="pb-8 mt-24 text-4xl font-medium border-b-2 border-hit-gray-600 text-hit-gray-400" id="about">
				About
			</h2>
			<div class="flex flex-col gap-6 mt-4 lg:flex-row">
				<div class="lg:w-2/3">
					<p>
						Rotors shader was designed for spinning helicopter and blimp propellers, but it can also be used
						to create semi-transparent glass window sub-meshes for vehicles. The shader spins similarly to
						wheels and there is no known way to stop it from spinning, so a workaround defines each vertex
						of the mesh as a wheel which spins around itself.
					</p><p class="mt-4">
						This article assumes you are familiar with <Link
							classes=""
							href="/shader/rotors/"
							text="rotors shader prop or building asset creation"
							theme="internallink"
						/> and regular vehicle asset creation using sub-meshes.
					</p>
				</div><div class="lg:w-1/3">
					<a href="/images/shader/rotors-vehicle/step1.jpg" target="_blank">
						<Picture
							width={images.rotorstep.width / 2}
							densities={[1.5, 2]}
							formats={['avif', 'webp']}
							src={images.rotorstep}
							alt="Semi-transparent windows on a car"
							class="w-full h-auto"
							loading="eager"
						/></a
					><p class="explanation">Semi-transparent windows on a car.</p>
				</div>
			</div>
			<h2
				class="pb-8 mt-24 text-4xl font-medium border-b-2 border-hit-gray-600 text-hit-gray-400"
				id="limitations"
			>
				Limitations
			</h2>
			<h3 class="pb-4 mt-16 text-2xl font-semibold border-b text-hit-gray-400 border-hit-gray-500" id="trailers">
				Trailers
			</h3>
			<p class="mt-4">
				This technique is currently not applicable for trailers, because they recalculate vertex colors when the
				trailer is added.
			</p>
			<h3
				class="pb-4 mt-16 text-2xl font-semibold border-b text-hit-gray-400 border-hit-gray-500"
				id="suspension"
			>
				Suspension
			</h3>
			<p class="mt-4">
				The rotors shader will not move together with the vehicle suspension, so <Link
					classes=""
					href="/modtools/#m_leanmultiplier"
					text="suspension lean and nod multipliers"
					theme="internallink"
				/> should be set to 0.
			</p>
			<h2 class="pb-8 mt-24 text-4xl font-medium border-b-2 border-hit-gray-600 text-hit-gray-400" id="mesh">
				Mesh
			</h2>
			<h3
				class="pb-4 mt-16 text-2xl font-semibold border-b text-hit-gray-400 border-hit-gray-500"
				id="Vertex Count"
			>
				Vertex Count
			</h3>
			<p class="mt-4">
				Each sub-mesh is limited to 32 vertices, this is because vertex paint is used to define each spinning
				"wheel" and every wheel adds 8 to the green vertex color channel.
			</p>
			<h3
				class="pb-4 mt-16 text-2xl font-semibold border-b text-hit-gray-400 border-hit-gray-500"
				id="vertex-normals"
			>
				Vertex Normals
			</h3>
			<div class="flex flex-col gap-6 mt-4 lg:flex-row">
				<div class="lg:w-2/3">
					<p>
						Every vertex will become a wheel which spins around itself, and it can only spin around one
						axis, which results in rotating reflections while the vehicle is moving. To hide this problem,
						all vertex normals of each mesh should be facing straight into the direction of the axis around
						which they will spin.
					</p>
				</div><div class="lg:w-1/3">
					<a href="/images/shader/rotors-vehicle/normals.jpg" target="_blank">
						<Picture
							width={images.rotornormals.width / 2}
							densities={[1.5, 2]}
							formats={['avif', 'webp']}
							src={images.rotornormals}
							alt="Car windows split into 4 sub-meshes"
							class="w-full h-auto"
						/></a
					><p class="explanation">
						Car windows split into 4 sub-meshes. Normals of each mesh are facing straight on an axis. The
						side windows will spin around X-axis, the windshield around Y, the rear window around Z. Note
						that ingame the Y-axis is up/down.
					</p>
				</div>
			</div>
			<h2 class="pb-8 mt-24 text-4xl font-medium border-b-2 border-hit-gray-600 text-hit-gray-400" id="script">
				Script
			</h2>
			<p class="mt-4">
				To change the shader and automatically calculate vertex paint and tire parameters, use <Link
					classes=""
					href="https://gist.github.com/ronyx69/0d4c484118aa32407cfc75c2e1b5a4d7"
					text="this script"
					theme="externallink"
				/>.
			</p>
			<h2 class="pb-8 mt-24 text-4xl font-medium border-b-2 border-hit-gray-600 text-hit-gray-400" id="textures">
				Textures
			</h2>
			<p class="mt-4">
				Everything is the same way as for regular rotors shader props and buildings, except for the alpha map.
				On vehicles, the sub-meshes will be 50% transparent by default and the alpha map can only make it even
				more transparent.
			</p>
		</div>
	</section>
</MainLayout>
