---
import type { ImageOutputFormat } from 'astro';
import { getImage } from 'astro:assets';

type Props = {
	src: ImageMetadata;
	alt: string;
	loading: 'eager' | 'lazy';
	format?: ImageOutputFormat;
	naturalWidth: number;
	naturalHeight: number;
	srcWidths: number[];
	sizes: string;
	class?: string;
};

async function generateResponsiveImage({ src, format, srcWidths }: Omit<Props, 'alt' | 'sizes' | 'class'>) {
	const imgSrcSet = srcWidths.map(async (size) => {
		const image = await getImage({ src, width: size, format });
		return `${image.src} ${size}w`;
	});

	const imgSrc = await getImage({ src, width: Math.max(...srcWidths), format });

	return {
		srcSet: await Promise.all(imgSrcSet),
		imgSrc: imgSrc.src,
	};
}

const { src, srcWidths, format, alt, naturalHeight, naturalWidth, loading, sizes, class: imgClass } = Astro.props;

const { srcSet, imgSrc } = await generateResponsiveImage({
	src,
	srcWidths,
	naturalWidth,
	naturalHeight,
	format,
	loading,
});
---

<img
	srcset={srcSet.join(', ')}
	width={naturalWidth}
	height={naturalHeight}
	sizes={sizes}
	alt={alt}
	loading={loading}
	src={imgSrc}
	class={imgClass || ''}
/>
